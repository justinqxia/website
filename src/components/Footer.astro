---
import activitiesData from '../data/activities.json';
const today = new Date();
const activities = activitiesData.activities;
---

<footer>
	<div class="time-counter">
		You've spent <span id="timeCounter">0:00:00</span> on this website
	</div>
	<div class="activity-comparison">
		<div>In that time, I could:</div>
		<div class="activity-container">
			<span id="currentActivity" class="activity-text"></span>
			<span id="nextActivity" class="activity-text"></span>
		</div>
	</div>
	<div class="social-links">
		<a href="https://linkedin.com/in/justin-xia" target="_blank">
			<span class="sr-only">Visit my LinkedIn</span>
			<svg class="footer-svg" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-linkedin" viewBox="0 0 16 16">
				<path d="M0 1.146C0 .513.526 0 1.175 0h13.65C15.474 0 16 .513 16 1.146v13.708c0 .633-.526 1.146-1.175 1.146H1.175C.526 16 0 15.487 0 14.854zm4.943 12.248V6.169H2.542v7.225zm-1.2-8.212c.837 0 1.358-.554 1.358-1.248-.015-.709-.52-1.248-1.342-1.248S2.4 3.226 2.4 3.934c0 .694.521 1.248 1.327 1.248zm4.908 8.212V9.359c0-.216.016-.432.08-.586.173-.431.568-.878 1.232-.878.869 0 1.216.662 1.216 1.634v3.865h2.401V9.25c0-2.22-1.184-3.252-2.764-3.252-1.274 0-1.845.7-2.165 1.193v.025h-.016l.016-.025V6.169h-2.4c.03.678 0 7.225 0 7.225z"/>
			</svg>
		</a>
		<a href="https://github.com/justinqxia" target="_blank">
			<span class="sr-only">Visit my GitHub</span>
			<svg class="footer-svg" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-github" viewBox="0 0 16 16">
				<path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27s1.36.09 2 .27c1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.01 8.01 0 0 0 16 8c0-4.42-3.58-8-8-8"/>
			</svg>
		</a>
	</div>
	&copy; {today.getFullYear()} Justin Xia. All rights reserved.
</footer>
<style>
	footer {
		padding: 2em 1em 2em 1em;
		background: linear-gradient(var(--gray-gradient)) no-repeat;
		color: rgb(var(--gray));
		text-align: center;
	}
	.time-counter {
		font-size: 1em;
	}
	.activity-comparison {
		font-size: 1em;
		font-style: italic;
	}
	.activity-container {
		position: relative;
		display: block;
		min-height: 1.2em;
	}
	.activity-text {
		font-weight: bold;
		position: absolute;
		left: 0;
		right: 0;
		transition: opacity 1s ease-in-out;
	}
	.social-links {
		display: flex;
		justify-content: center;
		gap: 1em;
		margin-top: 1em;
	}
	.social-links a {
		text-decoration: none;
		color: rgb(var(--gray));
	}
	.social-links a:hover {
		color: rgb(var(--gray-dark));
	}

	.footer-svg {
		width: 36px;
		height: 36px;
		fill: rgb(var(--gray));
	}

	.footer-svg path {
		stroke: #fff;
		stroke-width: 0;
	}

	.footer-svg:hover path {
		stroke-width: 0.5;
	}
</style>

<script define:vars={{ activities }}>
	// Get the stored start time or set a new one if it doesn't exist
	let startTime;
	const storedTime = localStorage.getItem('websiteStartTime');
	if (!storedTime) {
		startTime = Date.now();
		localStorage.setItem('websiteStartTime', startTime.toString());
	} else {
		startTime = parseInt(storedTime);
	}
	
	const timeCounter = document.getElementById('timeCounter');
	const currentActivity = document.getElementById('currentActivity');
	const nextActivity = document.getElementById('nextActivity');
	const resetButton = document.getElementById('resetButton');

	// Store the current activity index in localStorage
	let currentActivityIndex = parseInt(localStorage.getItem('currentActivityIndex') || '0');
	let isTransitioning = false;
	
	function updateTimeCounter() {
		if (!timeCounter || !currentActivity || !nextActivity) return;
		
		const currentTime = Date.now();
		const timeSpent = currentTime - startTime;
		
		const hours = Math.floor(timeSpent / (1000 * 60 * 60));
		const minutes = Math.floor((timeSpent % (1000 * 60 * 60)) / (1000 * 60));
		const seconds = Math.floor((timeSpent % (1000 * 60)) / 1000);
		
		timeCounter.textContent = `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

		// Find the appropriate activity based on time spent
		if (!isTransitioning && currentActivityIndex < activities.length - 1 && timeSpent >= activities[currentActivityIndex + 1].duration) {
			isTransitioning = true;
			nextActivity.textContent = activities[currentActivityIndex + 1].text;
			nextActivity.style.opacity = '0';
			
			// Start the transition
			requestAnimationFrame(() => {
				currentActivity.style.opacity = '0';
				nextActivity.style.opacity = '1';
			});

			// After transition completes
			setTimeout(() => {
				currentActivity.textContent = activities[currentActivityIndex + 1].text;
				currentActivity.style.opacity = '1';
				nextActivity.style.opacity = '0';
				currentActivityIndex++;
				localStorage.setItem('currentActivityIndex', currentActivityIndex.toString());
				isTransitioning = false;
			}, 1000);
		}
	}

	// Set initial activity
	if (currentActivity) {
		currentActivity.textContent = activities[currentActivityIndex].text;
		currentActivity.style.opacity = '1';
	}
	if (nextActivity) {
		nextActivity.style.opacity = '0';
	}

	// Update the counter every second
	setInterval(updateTimeCounter, 1000);
	// Initial update
	updateTimeCounter();
</script>
